#include "carInfoUtils.h"
#include <iostream>
#include <fstream>

using namespace std;

void printCarInfo(const CarInfo& car) {
    cout << "Car Serial Number: " << car.serial_number << endl;
    cout << "Chassis Serial Number: " << car.chassis.serial_number << endl;
    cout << "Chassis Model: " << car.chassis.model << endl;
    cout << "Wheel Base: " << car.chassis.wheel_base << endl;
    cout << "Track Width: " << car.chassis.track_width << endl;
    cout << "Min Ground Clearance: " << car.chassis.min_ground_clearance << endl;
    cout << "Min Turning Radius: " << car.chassis.min_turning_radius << endl;
    cout << "Drive Type: " << car.chassis.drive_type << endl;
    cout << "Max Travel Distance: " << car.chassis.max_travel_distance << endl;
    cout << "Tire Model: " << car.chassis.tire.model << endl;
    cout << "Tire Size: " << car.chassis.tire.size << endl;
    cout << "AGX Model: " << car.agx.model << endl;
    cout << "AGX AI: " << car.agx.AI << endl;
    cout << "AGX CUDA Cores: " << car.agx.cuda_cores << endl;
    cout << "AGX Tensor Cores: " << car.agx.tensor_cores << endl;
    cout << "AGX Memory: " << car.agx.memory << endl;
    cout << "AGX Storage: " << car.agx.storage << endl;
    cout << "Camera Model: " << car.camera.model << endl;
    cout << "Camera RGB: " << car.camera.rgb_camera << endl;
    cout << "Camera RGB Resolution: " << car.camera.rgb_resolution.width << "x" << car.camera.rgb_resolution.height << endl;
    cout << "Camera RGB FPS: " << car.camera.rgb_fps << endl;
    cout << "Camera FOV: " << car.camera.fov.width << "x" << car.camera.fov.height << endl;
    cout << "Camera Depth FPS: " << car.camera.depth_fps << endl;
    cout << "Lidar Model: " << car.lidar.model << endl;
    cout << "Lidar Channels: " << car.lidar.channels << endl;
    cout << "Lidar Range: " << car.lidar.range << endl;
    cout << "Lidar Power: " << car.lidar.power << endl;
    cout << "IMU Model: " << car.imu.model << endl;
    cout << "IMU Manufacturer: " << car.imu.manufacturer << endl;
    cout << "Screen Size: " << car.screen.size << endl;
    cout << "Screen Model: " << car.screen.model << endl;
    cout << "Battery Voltage: " << car.battery.voltage << endl;
    cout << "Battery Capacity: " << car.battery.capacity << endl;
    cout << "Battery Charge Time: " << car.battery.charge_time << endl;
}

void saveCarInfo(const CarInfo& car, const std::string& path) {
    std::ofstream ofs(path);
    if (!ofs) return;
    ofs << "Car Serial Number: " << car.serial_number << endl;
    ofs << "Chassis Serial Number: " << car.chassis.serial_number << endl;
    ofs << "Chassis Model: " << car.chassis.model << endl;
    ofs << "Wheel Base: " << car.chassis.wheel_base << endl;
    ofs << "Track Width: " << car.chassis.track_width << endl;
    ofs << "Min Ground Clearance: " << car.chassis.min_ground_clearance << endl;
    ofs << "Min Turning Radius: " << car.chassis.min_turning_radius << endl;
    ofs << "Drive Type: " << car.chassis.drive_type << endl;
    ofs << "Max Travel Distance: " << car.chassis.max_travel_distance << endl;
    ofs << "Tire Model: " << car.chassis.tire.model << endl;
    ofs << "Tire Size: " << car.chassis.tire.size << endl;
    ofs << "AGX Model: " << car.agx.model << endl;
    ofs << "AGX AI: " << car.agx.AI << endl;
    ofs << "AGX CUDA Cores: " << car.agx.cuda_cores << endl;
    ofs << "AGX Tensor Cores: " << car.agx.tensor_cores << endl;
    ofs << "AGX Memory: " << car.agx.memory << endl;
    ofs << "AGX Storage: " << car.agx.storage << endl;
    ofs << "Camera Model: " << car.camera.model << endl;
    ofs << "Camera RGB: " << car.camera.rgb_camera << endl;
    ofs << "Camera RGB Resolution: " << car.camera.rgb_resolution.width << "x" << car.camera.rgb_resolution.height << endl;
    ofs << "Camera RGB FPS: " << car.camera.rgb_fps << endl;
    ofs << "Camera FOV: " << car.camera.fov.width << "x" << car.camera.fov.height << endl;
    ofs << "Camera Depth FPS: " << car.camera.depth_fps << endl;
    ofs << "Lidar Model: " << car.lidar.model << endl;
    ofs << "Lidar Channels: " << car.lidar.channels << endl;
    ofs << "Lidar Range: " << car.lidar.range << endl;
    ofs << "Lidar Power: " << car.lidar.power << endl;
    ofs << "IMU Model: " << car.imu.model << endl;
    ofs << "IMU Manufacturer: " << car.imu.manufacturer << endl;
    ofs << "Screen Size: " << car.screen.size << endl;
    ofs << "Screen Model: " << car.screen.model << endl;
    ofs << "Battery Voltage: " << car.battery.voltage << endl;
    ofs << "Battery Capacity: " << car.battery.capacity << endl;
    ofs << "Battery Charge Time: " << car.battery.charge_time << endl;
    ofs.close();
}

void saveCarInfoJson(const CarInfo& car, const std::string& path) {
    std::ofstream ofs(path);
    if (!ofs) return;
    ofs << "{\n";
    ofs << "  \"serial_number\": \"" << car.serial_number << "\",\n";
    ofs << "  \"chassis\": {\n";
    ofs << "    \"serial_number\": \"" << car.chassis.serial_number << "\",\n";
    ofs << "    \"model\": \"" << car.chassis.model << "\",\n";
    ofs << "    \"wheel_base\": " << car.chassis.wheel_base << ",\n";
    ofs << "    \"track_width\": " << car.chassis.track_width << ",\n";
    ofs << "    \"min_ground_clearance\": " << car.chassis.min_ground_clearance << ",\n";
    ofs << "    \"min_turning_radius\": " << car.chassis.min_turning_radius << ",\n";
    ofs << "    \"drive_type\": \"" << car.chassis.drive_type << "\",\n";
    ofs << "    \"max_travel_distance\": " << car.chassis.max_travel_distance << ",\n";
    ofs << "    \"tire\": {\n";
    ofs << "      \"model\": " << car.chassis.tire.model << ",\n";
    ofs << "      \"size\": " << car.chassis.tire.size << "\n";
    ofs << "    }\n";
    ofs << "  },\n";
    ofs << "  \"agx\": {\n";
    ofs << "    \"model\": \"" << car.agx.model << "\",\n";
    ofs << "    \"AI\": " << car.agx.AI << ",\n";
    ofs << "    \"cuda_cores\": " << car.agx.cuda_cores << ",\n";
    ofs << "    \"tensor_cores\": " << car.agx.tensor_cores << ",\n";
    ofs << "    \"memory\": " << car.agx.memory << ",\n";
    ofs << "    \"storage\": " << car.agx.storage << "\n";
    ofs << "  },\n";
    ofs << "  \"camera\": {\n";
    ofs << "    \"model\": \"" << car.camera.model << "\",\n";
    ofs << "    \"rgb_camera\": \"" << car.camera.rgb_camera << "\",\n";
    ofs << "    \"rgb_resolution\": {\"width\": " << car.camera.rgb_resolution.width << ", \"height\": " << car.camera.rgb_resolution.height << "},\n";
    ofs << "    \"rgb_fps\": " << car.camera.rgb_fps << ",\n";
    ofs << "    \"fov\": {\"width\": " << car.camera.fov.width << ", \"height\": " << car.camera.fov.height << "},\n";
    ofs << "    \"depth_fps\": " << car.camera.depth_fps << "\n";
    ofs << "  },\n";
    ofs << "  \"lidar\": {\n";
    ofs << "    \"model\": \"" << car.lidar.model << "\",\n";
    ofs << "    \"channels\": " << car.lidar.channels << ",\n";
    ofs << "    \"range\": " << car.lidar.range << ",\n";
    ofs << "    \"power\": " << car.lidar.power << "\n";
    ofs << "  },\n";
    ofs << "  \"imu\": {\n";
    ofs << "    \"model\": \"" << car.imu.model << "\",\n";
    ofs << "    \"manufacturer\": \"" << car.imu.manufacturer << "\"\n";
    ofs << "  },\n";
    ofs << "  \"screen\": {\n";
    ofs << "    \"size\": " << car.screen.size << ",\n";
    ofs << "    \"model\": \"" << car.screen.model << "\"\n";
    ofs << "  },\n";
    ofs << "  \"battery\": {\n";
    ofs << "    \"voltage\": " << car.battery.voltage << ",\n";
    ofs << "    \"capacity\": " << car.battery.capacity << ",\n";
    ofs << "    \"charge_time\": " << car.battery.charge_time << "\n";
    ofs << "  }\n";
    ofs << "}\n";
    ofs.close();
}

void printCarInfoJson(const CarInfo& car) {
    std::cout << "{\n";
    std::cout << "  \"serial_number\": \"" << car.serial_number << "\",\n";
    std::cout << "  \"chassis\": {\n";
    std::cout << "    \"serial_number\": \"" << car.chassis.serial_number << "\",\n";
    std::cout << "    \"model\": \"" << car.chassis.model << "\",\n";
    std::cout << "    \"wheel_base\": " << car.chassis.wheel_base << ",\n";
    std::cout << "    \"track_width\": " << car.chassis.track_width << ",\n";
    std::cout << "    \"min_ground_clearance\": " << car.chassis.min_ground_clearance << ",\n";
    std::cout << "    \"min_turning_radius\": " << car.chassis.min_turning_radius << ",\n";
    std::cout << "    \"drive_type\": \"" << car.chassis.drive_type << "\",\n";
    std::cout << "    \"max_travel_distance\": " << car.chassis.max_travel_distance << ",\n";
    std::cout << "    \"tire\": {\n";
    std::cout << "      \"model\": " << car.chassis.tire.model << ",\n";
    std::cout << "      \"size\": " << car.chassis.tire.size << "\n";
    std::cout << "    }\n";
    std::cout << "  },\n";
    std::cout << "  \"agx\": {\n";
    std::cout << "    \"model\": \"" << car.agx.model << "\",\n";
    std::cout << "    \"AI\": " << car.agx.AI << ",\n";
    std::cout << "    \"cuda_cores\": " << car.agx.cuda_cores << ",\n";
    std::cout << "    \"tensor_cores\": " << car.agx.tensor_cores << ",\n";
    std::cout << "    \"memory\": " << car.agx.memory << ",\n";
    std::cout << "    \"storage\": " << car.agx.storage << "\n";
    std::cout << "  },\n";
    std::cout << "  \"camera\": {\n";
    std::cout << "    \"model\": \"" << car.camera.model << "\",\n";
    std::cout << "    \"rgb_camera\": \"" << car.camera.rgb_camera << "\",\n";
    std::cout << "    \"rgb_resolution\": {\"width\": " << car.camera.rgb_resolution.width << ", \"height\": " << car.camera.rgb_resolution.height << "},\n";
    std::cout << "    \"rgb_fps\": " << car.camera.rgb_fps << ",\n";
    std::cout << "    \"fov\": {\"width\": " << car.camera.fov.width << ", \"height\": " << car.camera.fov.height << "},\n";
    std::cout << "    \"depth_fps\": " << car.camera.depth_fps << "\n";
    std::cout << "  },\n";
    std::cout << "  \"lidar\": {\n";
    std::cout << "    \"model\": \"" << car.lidar.model << "\",\n";
    std::cout << "    \"channels\": " << car.lidar.channels << ",\n";
    std::cout << "    \"range\": " << car.lidar.range << ",\n";
    std::cout << "    \"power\": " << car.lidar.power << "\n";
    std::cout << "  },\n";
    std::cout << "  \"imu\": {\n";
    std::cout << "    \"model\": \"" << car.imu.model << "\",\n";
    std::cout << "    \"manufacturer\": \"" << car.imu.manufacturer << "\"\n";
    std::cout << "  },\n";
    std::cout << "  \"screen\": {\n";
    std::cout << "    \"size\": " << car.screen.size << ",\n";
    std::cout << "    \"model\": \"" << car.screen.model << "\"\n";
    std::cout << "  },\n";
    std::cout << "  \"battery\": {\n";
    std::cout << "    \"voltage\": " << car.battery.voltage << ",\n";
    std::cout << "    \"capacity\": " << car.battery.capacity << ",\n";
    std::cout << "    \"charge_time\": " << car.battery.charge_time << "\n";
    std::cout << "  }\n";
    std::cout << "}\n";
}
